version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=pubg_ecommerce;Username=postgres;Password=your_password;Maximum Pool Size=100;Minimum Pool Size=20
      - Cloudinary__CloudName=dmwfdkml6
      - Cloudinary__ApiKey=565611315435648
      - Cloudinary__ApiSecret=d7ywK9dRepHZ7qWy2rEEHH5ahzU
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - pubg-network

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=pubg_ecommerce
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=your_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    restart: unless-stopped
    networks:
      - pubg-network

networks:
  pubg-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local